schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getQuote(id: ID!): Quote
    #Scan through all values of type 'Quote'.
    ##### Use the 'count' and 'nextToken' arguments to paginate.
    allQuote(limit: Int, nextToken: String): QuoteConnection
    #Get a single value of type 'Comment' by primary key.
    getComment(quoteId: ID!): Comment
    #Scan through all values of type 'Comment'.
    ##### Use the 'count' and 'nextToken' arguments to paginate.
    allComment(count: Int, nextToken: String): [Comment]
}

type Mutation {
    deleteQuote(id: ID!): Quote
    commentOnQuote(quoteId: ID!, content: String!, createdAt: String!): Comment
    #Put a single value of type 'Quote'.
    ##### If an item exists it's updated. If it does not it's created.
    incrementQuoteLikes(id: ID!): Quote
    incrementQuoteDislikes(id: ID!): Quote
    putQuote(
    content: String!,
    author: String!,
    createdDate: String!,
    likes: Int,
    dislikes: Int
): Quote
    #Put a single value of type 'Comment'.
    ##### If an item exists it's updated. If it does not it's created.
    putComment(quoteId: ID!, content: String!, createdAt: String!): Comment
    #Delete a single value of type 'Comment' by a primary key.
    deleteComment(quoteId: ID!): Comment
}


type Subscription {
    subscribeToQuoteComments(quoteId: String!): Comment
    @aws_subscribe(mutations: ["commentOnQuote"])
}


type Quote {
    id: ID!
    content: String!
    author: String!
    profession: String
    createdDate: String!
    likes: Int
    dislikes: Int
    comments(limit: Int, nextToken: String): CommentConnection
    topics: [String]
    image_url: String
    last_like_userId: String
    last_like_time: String
}

type Comment {
    quoteId: ID!
    commentId: String!
    content: String!
    createdAt: String!
    user: User
}

type CommentConnection {
    items: [Comment]
    nextToken: String
}

type User{
    userId: ID!
    username: String
    firstName: String
    lastName: String
    email: String
    likeQuotes: [Quote]
    dislikeQuotess: [Quote]
    mottoQuotes: [UserMotto]
    following: [User]
    followers: [User]
}

type MottoComment {
    mottoCommentId: ID!
    commentId: String!
    content: String!
    createdAt: String!
    user:User
}

type MottoCommentConnection {
    items: [MottoComment]
    nextToken: String
}

type UserMotto{
    userMottoId: ID!
    content: String!
    author: Author
    user: User
    createdDate: String!
    comments(limit: Int, nextToken: String): MottoCommentConnection
}

type Author {
    authorId: ID!
    firstName: String!
    lastName: String!
    country: String!
    profession: String!
    quotes: [Quote]
}

type Topic {
    topicId: ID!
    topic: String!
}

type QuoteConnection {
    items: [Quote]
    nextToken: String
}


